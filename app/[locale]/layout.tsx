'use client'

import { AuthProvider, ThemeModeConsumer, ThemeModeProvider } from '@contexts'
import { ThemeMode } from '@custom-types'
import {
  baseFontSize,
  bodyText,
  breakpoints,
  colorPalette,
  darkModeTheme,
  defaultFontFamily,
  headings,
} from '@themes'
import { Inter, Antonio } from 'next/font/google'
import styled, { ThemeProvider, createGlobalStyle } from 'styled-components'
import StyledComponentsRegistry from './registry'
import { UserProvider } from '@auth0/nextjs-auth0/client'
import { GoogleAnalytics } from 'nextjs-google-analytics'
import { Footer, Header, Layout } from '@components'
import classNames from 'classnames'
import { NextIntlClientProvider } from 'next-intl'
import { notFound } from 'next/navigation'
// import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'], variable: '--font-inter' })
const antonio = Antonio({
  subsets: ['latin'],
  weight: ['600'],
  variable: '--font-antonio',
})

// export const metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// }

export function generateStaticParams() {
  return [{ locale: 'en' }, { locale: 'cs' }]
}

const GlobalStyle = createGlobalStyle<{ themeMode: ThemeMode }>`
  html {
    font-size: ${baseFontSize}px;

    @media (min-width: 480pxpx) {
      font-size: ${baseFontSize};
    }
  }

  html,
  body {
    padding: 0;
    margin: 0;
    font-family: var(--font-inter), ${defaultFontFamily};
    line-height: 1.5;
    color: ${colorPalette.text.main};
    min-height: 100vh;
  }

  html,
  body,
  body > div {
    display: flex;
    flex-direction: column;
  }

  body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    font-size: 16px;
    background: linear-gradient(180deg, #e6eaf5 0%, #f6f6f6 80%);

    ${({ themeMode }) =>
      themeMode === 'dark' &&
      `
      background: ${darkModeTheme.background};
      color: ${darkModeTheme.textOnBackground};
    `}})}
  }

  body > div {
    display: flex;
    flex-direction: column;
    font-family: var(--font-inter);
  }

  a {
    color: inherit;
    text-decoration: none;
  }

  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }

  h1 {
    font-size: ${headings.h1.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${headings.h1.tablet}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${headings.h1.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${headings.h1.largeDesktop}px;
    }
  }

  h2 {
    font-size: ${headings.h2.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${headings.h2.tablet}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${headings.h2.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${headings.h2.largeDesktop}px;
    }
  }

  h3 {
    font-size: ${headings.h3.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${headings.h3.tablet}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${headings.h3.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${headings.h3.largeDesktop}px;
    }
  }

  h4 {
    font-size: ${headings.h4.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${headings.h4.tablet}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${headings.h4.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${headings.h4.largeDesktop}px;
    }
  }

  h5 {
    font-size: ${headings.h5.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${headings.h5.tablet}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${headings.h5.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${headings.h5.largeDesktop}px;
    }
  }

  h6 {
    font-size: ${headings.h5.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${headings.h5.tablet}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${headings.h5.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${headings.h5.largeDesktop}px;
    }
  }

  small {
    font-size: ${bodyText.small.mobile}px;

    @media (min-width: ${breakpoints.tablet}px) {
      font-size: ${bodyText.small.desktop}px;
    }

    @media (min-width: ${breakpoints.desktop}px) {
      font-size: ${bodyText.small.desktop}px;
    }

    @media (min-width: ${breakpoints.largeDesktop}px) {
      font-size: ${bodyText.small.largeDesktop}px;
    }
  }
`

const PageWrapper = styled.main`
  display: flex;
  flex-direction: column;
  flex: 1 0 auto;
`

export default async function RootLayout(args: {
  children: React.ReactNode
  params: any
}) {
  // const router = useRouter()
  const locale = args?.params?.locale ?? 'en'
  let messages
  try {
    messages = (await import(`../../messages/${locale}.json`)).default
  } catch (error) {
    console.error(error)
    notFound()
  }

  return (
    <html lang={locale}>
      <body className={classNames(inter.variable, antonio.variable)}>
        <AuthProvider>
          <NextIntlClientProvider locale={locale} messages={messages}>
            <StyledComponentsRegistry>
              <ThemeModeProvider>
                <ThemeModeConsumer>
                  {({ themeMode }) => (
                    <>
                      <GlobalStyle themeMode={themeMode} />
                      <UserProvider>
                        <ThemeProvider theme={{}}>
                          <>
                            <GoogleAnalytics trackPageViews />
                            <Header />
                            {/* <Layout flexDirection="column"> */}
                            <PageWrapper>{args.children}</PageWrapper>
                            {/* </Layout> */}
                            <Footer />
                          </>
                        </ThemeProvider>
                      </UserProvider>
                    </>
                  )}
                </ThemeModeConsumer>
              </ThemeModeProvider>
            </StyledComponentsRegistry>
          </NextIntlClientProvider>
        </AuthProvider>
      </body>
    </html>
  )
}
